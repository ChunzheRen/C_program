格式化转换符号：
%c也就是单个字符
%p 指针 
%s 字符串
%% 打印一个%

注意 字符和字符串分别使用""  and ''

printf修饰符号
%4d最小宽度为4的一个整数

字符串中，可以通过\n表示换行符，但是不可以通过enter或者return 来表示实际的换行符号。

scanf()将输入的字符串转化为整数、浮点数、字符和字符串。而printf（）表示将整数 字符串之类的转化为一个输出的文本。unicode转化为byte（计算机内部格式）

pritnf（）函数使用变量 常量和表达式。
scanf（）使用指向变量的一个指针。
在scanf中读取一般的类型的字符只需要使用&
然后scanf读取字符串到字符数组里面的时候，不要使用&
主要是因为数组的名字是第一个元素的地址，这样会覆盖输入。也就是%s字符串类型不可以用&

scanf中的格式化输入 表示的都是： 将文本的输入decode为什么。

getchar用来读取单个的char
fgets用来读取包含空格的字符串

scanf每次读取一个字符并且跳过所有的空白字符，从缓冲区里面取出来一个字符，如果取出来的字符是非数字字符，就将输入的字符扔回去，然后结束整数的输入。
这个被扔回去的字符会被下一次的输入所拿走，并不丢弃。

scanf也可以理解为输入和返回的是一个引用，目的是加速？？？
一般的scanf都会跳过“”里面的空格，而%c的话不一样。
“%c”会读取第一个空白的字符，而“ %c”会读取第一个非空白的字符。

scanf会返回一个0如果输入正常，会返回一个EOF如果输入异常，然后可以#define EOF -1，可以利用scanf的返回值放在while循环里面来检测输出是否有异常并处理一些错误。

string 字符串常量（const *） 以及字符数组\0

定义在标准输入输出头文件里面的函数：
getchar（）和 putchar（）来处理字符的输入和输出
putchar（）打印他自己所带的参数
getchar（）不带参数 ch=getchar（）
while （ch=getchar()!='\n'）也就是不断的读取输入和输出
字符在C中实际上使整数来存储，然后可以用putchar(int)来表示输出。

ctype.h中存在着很多的字符测试函数：
比如说：isalnum
isalpha 
tolower（）

然后就是条件运算符; 
max  = (judgements)? (one statement): (another statement);

while(ch=getchar() !='\0'){
do something
}

就是getchar和putchar还有就是printf以及scanf一样都是用来处理stdin和stdout的工具。可以通过文件的重定向，来改变你stream的具体情况。
getchar到末尾的时候会返回个EOF ,通常用预处理器定义为-1. EOF是一个数值，是标准IO函数检测到文件最后的时候自动返回的一个数值。getchar（）的返回类型实际山是一个int。

缓冲输入的启动是一个ENter操作，同时会加入一个换行符，然后这个换行符也会被一起发送。
处理换行符可以用：

getchar()表示从缓冲区调出来一个输入，然后处理。
ch= getchar（）表示将输出的东西存储在一个ch的字符里面。
但是两种方式都没有能处理\n的问题。
while(getchar()！='\n'）
continue#进行下一次循环
getchar读取每一个字符，但是scanf会自动跳过空格制表和换行。
一定注意，跳过换行符不一定意味着会丢弃换行符，比如说scanf会在输入类型改变的时候将\n返回去，但是没有删除\n，\n会留着等待下一次的输出。然后就悲剧了。
就类似于输入数字和其余的东西，数字的输入终点在于一个非数字字符，然后后面的\n就会被返回去0.0


puts函数仅仅显示字符串，并且在末尾自动加上换行符号。
puts（certain_string）

可以用字符串常量 const *【字符串字面量，字符串常量】
char类型数组
指向char的指针来定义一个字符串
①字符串常量自动化加入\0，存在heap里面。是全局变量。
字符串字面量是一个指向内存中特定位置的指针，仅仅可以被初始化一次，然后在整个运行期间存在。static storage class

②字符串数组：
可以用数组初始化
或者用字符串字面值初始化数组来进行。
同时注意：字符串数组的数组名字是字符串的地址。
③指针来定义数组，要知道指针是一个对象，数组名字指向数组的第一个元素。
初始化一个字符串【数组】（3种方式）【为数组分配空间】

动态内存分配？？？？？
变长数组可以延迟初始化，但是一旦初始化之后，就不能够改变长度。

gets函数 读取一行的输入，丢弃换行符，结尾添加\0成为一个字符串。
scanf由于要指定类型，即使是%s，也只能够输入一个单词，中间不能够有空白。
gets（certain_string）将内容存储在数组里面。 

BufferOverflow问题：
fgets（string，n，filePath【stdin】） 读入n-1个字符，不丢弃换行符，存储在字符串。
fputs（string，filepath写入【stdout】）并不进行自动换行。

while（fgets（string，SIZE，stdin）！=NULL &&string[0]!='\n'）
{	do_something	}
【NULL也就是一个预处理器里面的宏】

由于fgets不会自动换行，所以可以完全反应我们的输入情况。但是由于不管\0和\n,所以我们要进行判断。
如果输入的短，会――\n\0
如果输入被截断，会――\0
如果你的末尾是\n的话，把\n变成\0然后输出，如果你的末尾是\0的话，就处理掉剩余的东西，然后输出。处理剩余东西的办法就是while_continue，就是遇到换行符就变成空字符输出，遇到空字符就把后面的东西全部跳过，然后输出。
两种情况停止输出：一个是一个enter的空行，\n，一个是



gets_s 只从标准的输入里面读取，遇到换行符选择丢弃而不是保留。
gets_s遇到最大字符数都没有遇到换行符：

要想继续使用超出的字符――用fputs。
要想丢弃超出的字符――用while进行操作。
