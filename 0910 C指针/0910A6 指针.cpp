#include <stdio.h>
#include <stdlib.h>

//指针的传递是涉及到申请空间的 malloc realloc free等等
//void func1 (char *s) {
//	s= (char*)malloc(100);
//}
//pointer =(pointer_type) malloc(ListSize);
//看得多了，自然就会了。 
//int main(){
//	char *p = NULL;
//	func1(p);
//	if(p){
//		printf("ok ,not Null");
//		free(p);
//	}
//	return 0;
//}
//但是p的数值还是原来的NULL，你传进去的不是P，而是p的一个副本啊，要真的改变p的值，要不然就传进去引用，或者返回一个数值赋给p。 

void func1 (char **s) {
	*s= (char*)malloc(100);
}
//指向指针的指针，传递进去的是一个指针的地址，也就是对于指针自己指向的对象做改变，而不是原来的对于指针指向变量的副本做改变。 
int main(){
	char *p = NULL;
	func1(&p);
	if(p){
		printf("ok ,not Null");
		free(p);
	}
	return 0;
}
//&p 这个类型是 char *s = &p;
//同样是按照地址传递参数，最后的结果根本不一样好不好。 





//void func2(char **s) {
//	*s = (char*)malloc(100);
//}
//？？？？？？？？？？？？ 
//int main(){
//	char *p =NULL;
//	func2(&p);
//	if(p)
//		printf("ok");
//		free(p);
//	return 0;
//}

//传进去的是变量的地址。 
//store the address of vals in pointer.

//int *p=&val;
//%d --->>>*ip
//%x --->>>&ip

//将NULL分配给一个空白的指针 要安全的多。
//可以使用4个算数运算符-- ++ - + 进行操作。
//可以定义数组来保存多个指针 。
//指针指针 
//将指针传递给C中的函数
//从C中的函数返回指针 



//可以接收函数的指针也可以接收一个数组
//数组的传入直接传入数组名字 arrayname 即可 。 

//pointer= &val 就是把变量地址付给你的指针  ，记住指针用来存放的是地址。 

//_________________________//从C中的函数返回指针//________________________//
//可以从函数中返回一个指针（大多数情况是数组） 
//然后就是要求你的函数定义这个局部变量是一个static 静态全局。
// int * func(){
// 	static array [10];
//	return array;
//	}
//int main (){
//	int *pointer; 
//	pointer =func();
//}

//传入的是一级指针S的话，函数中使用的是S的拷贝，要改变S的值，只能传入S的指针，也就是耳机指针。
//形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。
//因此，形参只在函数内部有效。函数调用结束返回主调用函数后则不能再使用该形参变量。

//因此在函数调用过程中，形参值发生改变，而实参中的值不会变化。
//而在引用调用的机制当中是将实参引用的地址传递给了形参，所以任何发生在形参上的改变实际上也发生在实参变量上。

void myMalloc(char *s) //我想在函数中分配内存,再返回 
{ s=(char *) malloc(100);}//传过来的是P所指的地址,并不是P的地址,所以改变S不会改变P 

//*在函数中是对于局部变量的改变，需要副本拷贝输出或者return赋值输出，并且对于malloc无可奈何
//，而**在函数中是对于变量自身的改变。 
//似乎C语言中没有真正的引用。


///按照指针传递是把一个指针的副本赋值给函数，这个副本指针和原版的指针都指向同一个位置。
//但是为何指针副本就没办法改变变量原来的值？？？ 

//修改办法一个就是用C++的引用，要不就是用二重指针
//char **s 
//*s 
//func（&s） 

//malloc返回的是个数值，这个数值是分配给副本指针的地址。
//一开始的确是指向同一个位置的指针，但是后来的话给其中一个东西分配空间就改变了啊。。。。。 
//指针传递参数一般要和malloc有关系，C中没有引用。
//C++一般不使用指针，想改变参数的数值直接使用引用就好了 
