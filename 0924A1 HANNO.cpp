#include <stdio.h>
#include <stdlib.h>
//给我最深的印象就是：对于你的具体的物理操作和计算理解的完全不一样。
//人看起来的矩阵，在计算机开来就是一个二维数组，甚至更严重，人看起来的汉诺塔，在计算机中根本没有这个东西
//甚至假想的三个数都没有，只是一个计算机抽象的东西。 
//但是在计算机更深入的存储结构中，的确可以体现出这几个的变化，这个是毋庸置疑的。
 
int step =0;

int move(char a ,int n, char b){
	printf("#%d : moved from %c to %c\n",n, a,b);
	step++;
	return 0;
}
//问题原因因在于没有能明白在函数中的变量而不是数值的差别。
//比如说你用char n，在函数中用n作为变量名就好了 
int func(int n,char a,char b,char c){
	if (n==1){
		move(a,1,c);//从a到c 
	}
	else{
		func(n-1,a,c,b);//从a经过c到b 
		move(a,n,c);
		func(n-1,b,a,c);
	}
	return 0;
}

int main(){
	func(3,'a','b','c');
	printf("%d",step);
}

//递归函数的执行： 
//在C中，主函数和子函数之间的调用时需要依靠栈来进行；
//分为三步：一个就是将你的给被调用函数――你的实参的地址，以及返回地址等等信息。
//为调用函数的局部变量分配存储区域。
//严蔚敏的书里面全部都是关于栈调用的实例。 

//递归函数的本质就是把原来需要进行用户手动分配的栈变成了电脑自动操作。 
//将你的操作地址以及实参地址存储在stack里面，然后就是需要进行stack的操作。

 
